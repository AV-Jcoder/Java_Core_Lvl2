package org.example.part_5_OOPrinciple.lesson26homework;

/**
 * Задача
 * Создать иерархию классов, описывающих геометрические фигуры на плоскости.
 *
 * - Можно пользоваться результатами предыдущего ДЗ.
 * - В иерархии должно быть не менее 10 классов/интерфейсов и хотя бы 2 уровня вложенности.
 * - Продемонстрировать переопределение методов в иерархии.
 * - Продемонстрировать добавление собственных методов в классах-наследниках (можно с помощью интерфейсов).
 *
 * Например, расчёт диагонали в прямоугольнике, расчёт высоты в треугольнике.
 *
 * - При разработке иерархии держать в уме принцип инкапсуляции, выбирать корректные имена классов и методов, пользоваться преимуществами полиморфизма.
 * - Отдавайте предпочтение интерфейсам, а не абстрактным классам.
 * - При переопределении методов обязательно использовать аннотацию @Override
 * - Не создавать лишних классов в системе (полностью дублирующих или не содержащих назначения)
 * - Каждый класс должен выполнять своё назначение.
 *
 * - Создать общие методы:
 * 1. Рассчитывающий площадь фигуры.
 * 2. Принимающий в качестве параметра фигуру и определяющий, равны ли площади текущей и полученной фигуры.
 *
 * - Создать класс ShapeUtils со статическими методами:
 * 1. Определяющим, является ли фигура прямоугольником.
 * 2. Определяющим, является ли фигура треугольником.
 *
 * - Для каждого неабстрактного класса переопределить метод toString() класса для представления информации о классах в строковой форме.
 *
 * В этом задании нет одного правильного решения, подойдите к нему творчески.
 */

public class Task1 {

    public static void main(String[] args) {
        Shape shape1 = new Rectangle(5,4);
        Shape shape2 = new Cube(5,4,3);
        Shape shape3 = new Circle(10);
        Shape shape4 = new Cylinder(10,8);
        drawAllShapes(shape1, shape2,shape3,shape4);
    }

    private static void drawAllShapes(Shape... shapes) {
        for (Shape shape : shapes) {
            System.out.println("~~~~~~~~~");
            shape.draw();
        }
    }
}
